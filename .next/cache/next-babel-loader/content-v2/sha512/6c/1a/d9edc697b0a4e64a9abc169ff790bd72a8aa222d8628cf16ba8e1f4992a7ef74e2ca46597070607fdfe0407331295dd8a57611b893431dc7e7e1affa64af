{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pedro/moveit2/src/contexts/ChallengesContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengeContext = /*#__PURE__*/createContext({});\nexport function ChallengeProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExpirience,\n    1: setCurrentExpirence\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExpirience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExpirence(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengeContext.Provider, {\n    value: {\n      level,\n      levelUp,\n      currentExpirience,\n      challengesCompleted,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/pedro/moveit2/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengeContext","ChallengeProvider","children","level","setLevel","currentExpirience","setCurrentExpirence","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,gBAAgB,gBAAGJ,aAAa,CAAC,EAAD,CAAtC;AAGP,OAAO,SAASK,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACpE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,iBAAD;AAAA,OAAoBC;AAApB,MAA2CT,QAAQ,CAAC,CAAD,CAAzD;AACA,QAAM;AAAA,OAACU,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDX,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACY,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMc,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAmB;AACfZ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASc,iBAAT,GAA6B;AACzB,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;AAEH;;AACD,WAASC,cAAT,GAA0B;AACtBb,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASc,iBAAT,GAA6B;AACzB,QAAI,CAACf,eAAL,EAAsB;AAClB;AACH;;AACD,UAAM;AAAEgB,MAAAA;AAAF,QAAahB,eAAnB;AAEA,QAAIiB,eAAe,GAAGrB,iBAAiB,GAAGoB,MAA1C;;AAEA,QAAIC,eAAe,IAAIf,qBAAvB,EAA8C;AAC1Ce,MAAAA,eAAe,GAAGA,eAAe,GAAGf,qBAApC;AACAK,MAAAA,OAAO;AACV;;AACDV,IAAAA,mBAAmB,CAACoB,eAAD,CAAnB;AACAhB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AAED,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BJ,MAAAA,KAD8B;AACvBa,MAAAA,OADuB;AACdX,MAAAA,iBADc;AACKE,MAAAA,mBADL;AAC0BU,MAAAA,iBAD1B;AAC6CR,MAAAA,eAD7C;AAC8Dc,MAAAA,cAD9D;AAE9BZ,MAAAA,qBAF8B;AAEPa,MAAAA;AAFO,KAAlC;AAAA,cAIMtB;AAJN;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH","sourcesContent":["import { createContext, useState, ReactNode, useEffect } from 'react'\nimport challenges from '../../challenges.json'\n\ninterface challenge {\n    type: 'body' | 'eye'\n    description: string\n    amount: number\n}\n\ninterface ChallengesContextData {\n    level: number\n    experienceToNextLevel: number\n    challengesCompleted: number\n    currentExpirience: number\n    levelUp: () => void\n    resetChallenge: () => void\n    startNewChallenge: () => void\n    completeChallenge: () => void\n    activeChallenge: challenge\n}\n\ninterface ChallengeProviderProps {\n    children: ReactNode\n}\n\nexport const ChallengeContext = createContext({} as ChallengesContextData)\n\n\nexport function ChallengeProvider({ children }: ChallengeProviderProps) {\n    const [level, setLevel] = useState(1)\n    const [currentExpirience, setCurrentExpirence] = useState(0)\n    const [challengesCompleted, setChallengesCompleted] = useState(0)\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\n\n    useEffect(() => {\n        Notification.requestPermission()\n    }, [])\n\n    function levelUp() {\n        setLevel(level + 1)\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex]\n\n        setActiveChallenge(challenge)\n\n    }\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    function completeChallenge() {\n        if (!activeChallenge) {\n            return\n        }\n        const { amount } = activeChallenge\n\n        let finalExperience = currentExpirience + amount\n\n        if (finalExperience >= experienceToNextLevel) {\n            finalExperience = finalExperience - experienceToNextLevel\n            levelUp()\n        }\n        setCurrentExpirence(finalExperience)\n        setActiveChallenge(null)\n        setChallengesCompleted(challengesCompleted + 1)\n    }\n\n    return (\n        <ChallengeContext.Provider value={{\n            level, levelUp, currentExpirience, challengesCompleted, startNewChallenge, activeChallenge, resetChallenge,\n            experienceToNextLevel, completeChallenge\n        }}>\n            { children}\n        </ChallengeContext.Provider>\n\n\n    )\n}"]},"metadata":{},"sourceType":"module"}