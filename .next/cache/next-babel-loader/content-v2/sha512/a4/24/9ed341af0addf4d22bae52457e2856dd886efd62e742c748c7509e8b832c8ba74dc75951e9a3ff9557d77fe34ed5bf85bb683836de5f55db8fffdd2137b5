{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pedro/moveit2/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengeContext = /*#__PURE__*/createContext({});\nexport function ChallengeProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExpirence = _useState2[0],\n      setCurrentExpirence = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengeContext.Provider, {\n    value: {\n      level: level,\n      levelUp: levelUp,\n      currentExpirence: currentExpirence,\n      challengesCompleted: challengesCompleted,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengeProvider, \"S9gxOk5RyZVxNi4DhUoas+mr+po=\");\n\n_c = ChallengeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeProvider\");","map":{"version":3,"sources":["/home/pedro/moveit2/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengeContext","ChallengeProvider","children","level","setLevel","currentExpirence","setCurrentExpirence","challengesCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAqBA,OAAO,IAAMC,gBAAgB,gBAAGH,aAAa,CAAC,EAAD,CAAtC;AAGP,OAAO,SAASI,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAC1CJ,QAAQ,CAAC,CAAD,CADkC;AAAA,MAC7DK,KAD6D;AAAA,MACtDC,QADsD;;AAAA,mBAEpBN,QAAQ,CAAC,CAAD,CAFY;AAAA,MAE7DO,gBAF6D;AAAA,MAE3CC,mBAF2C;;AAAA,mBAGfR,QAAQ,CAAC,CAAD,CAHO;AAAA,MAG7DS,mBAH6D;AAAA,MAGxCC,qBAHwC;;AAAA,mBAKtBV,QAAQ,CAAC,IAAD,CALc;AAAA,MAK7DW,eAL6D;AAAA,MAK5CC,kBAL4C;;AAOpE,WAASC,OAAT,GAAmB;AACfP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASS,iBAAT,GAA6B;AACzB,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AAEAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AAEH;;AACD,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAAEf,MAAAA,KAAK,EAALA,KAAF;AAASQ,MAAAA,OAAO,EAAPA,OAAT;AAAkBN,MAAAA,gBAAgB,EAAhBA,gBAAlB;AAAoCE,MAAAA,mBAAmB,EAAnBA,mBAApC;AAAyDK,MAAAA,iBAAiB,EAAjBA,iBAAzD;AAA4EH,MAAAA,eAAe,EAAfA;AAA5E,KAAlC;AAAA,cACMP;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAzBeD,iB;;KAAAA,iB","sourcesContent":["import { createContext, useState, ReactNode } from 'react'\nimport challenges from '../../challenges.json'\n\ninterface challenge {\n    type: 'body' | 'eye'\n    description: string\n    amount: number\n}\n\ninterface ChallengesContextData {\n    level: number\n    levelUp: () => void\n    currentExpirence: number\n    challengesCompleted: number\n    startNewChallenge: () => void\n    activeChallenge: challenge\n}\n\ninterface ChallengeProviderProps {\n    children: ReactNode\n}\n\nexport const ChallengeContext = createContext({} as ChallengesContextData)\n\n\nexport function ChallengeProvider({ children }: ChallengeProviderProps) {\n    const [level, setLevel] = useState(1)\n    const [currentExpirence, setCurrentExpirence] = useState(0)\n    const [challengesCompleted, setChallengeCompleted] = useState(0)\n\n    const [activeChallenge, setActiveChallenge] = useState(null)\n\n    function levelUp() {\n        setLevel(level + 1)\n    }\n\n    function startNewChallenge() {\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex]\n\n        setActiveChallenge(challenge)\n\n    }\n    return (\n        <ChallengeContext.Provider value={{ level, levelUp, currentExpirence, challengesCompleted, startNewChallenge, activeChallenge }}>\n            { children}\n        </ChallengeContext.Provider>\n\n\n    )\n}"]},"metadata":{},"sourceType":"module"}