{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pedro/moveit2/src/contexts/CountdonwContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { ChallengeContext } from './ChallengesContext';\nexport const CountdonwContext = /*#__PURE__*/createContext({});\nlet countdownTimeOut;\nexport function CountadonwProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengeContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 60);\n  const {\n    0: isAactive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeOut);\n    setIsActive(false);\n    setTime(0.1 * 60);\n  }\n\n  useEffect(() => {\n    if (isAactive && time > 0) {\n      countdownTimeOut = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isAactive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isAactive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdonwContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isAactive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/pedro/moveit2/src/contexts/CountdonwContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengeContext","CountdonwContext","countdownTimeOut","CountadonwProvider","children","startNewChallenge","time","setTime","isAactive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAAmBA,aAAnB,EAA6CC,UAA7C,EAAyDC,SAAzD,EAAoEC,QAApE,QAAoF,OAApF;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AACrE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,gBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,MAAM,EAAP,CAAhC;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA2BV,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAA0B;AACtBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACH;;AACDT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,SAAS,IAAIF,IAAI,GAAG,CAAxB,EAA2B;AACvBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAM;AAChCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAIO,IAAIE,SAAS,IAAIF,IAAI,KAAK,CAA1B,EAA6B;AAChCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AAGJ,GAZQ,EAYN,CAACG,SAAD,EAAYF,IAAZ,CAZM,CAAT;AAcA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BM,MAAAA,OAD8B;AAE9BG,MAAAA,OAF8B;AAG9BL,MAAAA,WAH8B;AAI9BF,MAAAA,SAJ8B;AAK9BQ,MAAAA,cAL8B;AAM9BC,MAAAA;AAN8B,KAAlC;AAAA,cAQKb;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH","sourcesContent":["import { Children, createContext, ReactNode, useContext, useEffect, useState } from 'react'\nimport { ChallengeContext } from './ChallengesContext'\n\ninterface CountdonwContextData {\n    minutes: number\n    seconds: number\n    hasFinished: boolean\n    isAactive: boolean\n    startCountdonw: () => void\n    resetCountdonw: () => void\n}\n\ninterface CountdonwProviderProps {\n    children: ReactNode\n}\n\nexport const CountdonwContext = createContext({} as CountdonwContextData)\n\nlet countdownTimeOut: NodeJS.Timeout\n\nexport function CountadonwProvider({ children }: CountdonwProviderProps) {\n    const { startNewChallenge } = useContext(ChallengeContext)\n\n    const [time, setTime] = useState(0.1 * 60)\n    const [isAactive, setIsActive] = useState(false)\n    const [hasFinished, setHasFinished] = useState(false)\n\n    const minutes = Math.floor(time / 60)\n    const seconds = time % 60\n\n    function startCountdown() {\n        setIsActive(true)\n    }\n\n    function resetCountdown() {\n        clearTimeout(countdownTimeOut)\n        setIsActive(false)\n        setTime(0.1 * 60)\n    }\n    useEffect(() => {\n        if (isAactive && time > 0) {\n            countdownTimeOut = setTimeout(() => {\n                setTime(time - 1)\n            }, 1000)\n        } else if (isAactive && time === 0) {\n            setHasFinished(true)\n            setIsActive(false)\n            startNewChallenge()\n        }\n\n\n    }, [isAactive, time])\n\n    return (\n        <CountdonwContext.Provider value={{\n            minutes,\n            seconds,\n            hasFinished,\n            isAactive,\n            startCountdown,\n            resetCountdown,\n        }}>\n            {children}\n        </CountdonwContext.Provider>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}